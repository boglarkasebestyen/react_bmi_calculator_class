{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/projektek/bmi/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Slider from 'react-rangeslider';\nimport 'react-rangeslider/lib/index.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      height: 0,\n      weight: 0,\n      heightErr: \"\",\n      weightErr: \"\",\n      bmiValue: \"\",\n      bmiText: \"\",\n      text: \"\",\n      chonkVisibility: \"invisibleChonk\",\n      resultChonk: \"\",\n      AllChonkImg: {\n        slimChonk: [\"./images/slim/1.jpg\", \"./images/slim/2.jpg\"],\n        normalChonk: [\"./images/normal/1.jpg\", \"./images/normal/3.jpg\", \"./images/normal/5.jpg\"],\n        fatChonk: [\"./images/fat/2.jpg\", \"./images/fat/3.jpg\", \"./images/fat/4.jpg\"],\n        tooFatChonk: [\"./images/2chonk/1.jpg\", \"./images/2chonk/3.jpg\", \"./images/2chonk/4.jpg\"]\n      }\n    };\n    this.calcBmi = this.calcBmi.bind(this);\n    this.minHeight = 95;\n    this.maxHeight = 220;\n    this.minWeight = 10;\n    this.maxWeight = 300;\n    this.slimThre = 18.5;\n    this.normalThre = 24.9;\n    this.fatThre = 29.9;\n  }\n\n  handleHeightChange(event) {\n    //spinner\n    this.setState({\n      height: event.target.value\n    });\n  }\n\n  handleWeightChange(event) {\n    //spinner\n    this.setState({\n      weight: event.target.value\n    });\n  }\n\n  handleHeightSliderChange(value) {\n    //range\n    this.setState({\n      height: value\n    });\n  }\n\n  handleWeightSliderChange(value) {\n    //range\n    this.setState({\n      weight: value\n    });\n  } // const minHeight = 95\n  // const maxHeight = 220\n  // const minWeight = 10\n  // const maxWeight = 300\n  // const slimThre = 18.5\n  // const normalThre = 24.9\n  // const fatThre = 29.9\n  //limiting input to numbers\n\n\n  handleKeyPress(source, event) {\n    const allowedChars = \".0123456789\";\n    const currentChar = event.key;\n    let found = false;\n\n    for (let i = 0; i < allowedChars.length; i++) {\n      if (currentChar === allowedChars[i]) {\n        found = true;\n      }\n    }\n\n    if (found === false) {\n      event.preventDefault();\n      return;\n    } //limiting number input in height/weight\n\n\n    let currentValue = 0;\n\n    if (source === 'height') {\n      currentValue = parseInt(this.state.height + currentChar);\n\n      if (currentValue > maxHeight) {\n        event.preventDefault();\n      }\n    } else {\n      currentValue = this.state.weight + currentChar;\n\n      if (currentValue > maxWeight) {\n        event.preventDefault();\n      }\n    }\n  } //classifying the results w/images, calculating BMI\n\n\n  classifyResult(result) {\n    if (result < slimThre) {\n      return \"slim\";\n    }\n\n    if (result <= normalThre) {\n      return \"normal\";\n    }\n\n    if (result <= fatThre) {\n      return \"fat\";\n    }\n\n    return \"tooFat\";\n  } //height, weight validation and min/max manual input nrs \n\n\n  validate() {\n    this.setState({\n      heightErr: \"\",\n      weightErr: \"\"\n    });\n    let heightErrStr = \"\";\n    let weightErrStr = \"\"; //error messageges for H/W\n\n    if (!this.state.height) {\n      heightErrStr = \"Please, enter height\";\n    } else if (this.state.height < minHeight) {\n      heightErrStr = \"Greater than 95, please\";\n    }\n\n    if (!this.state.weight) {\n      weightErrStr = \"Please, enter weight\";\n    } else if (this.state.weight < minWeight) {\n      weightErrStr = \"Greater than 10, please\";\n    }\n\n    if (heightErrStr || weightErrStr) {\n      this.setState({\n        heightErr: heightErrStr,\n        weightErr: weightErrStr\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n  calcBmi(event) {\n    if (!this.validate()) {\n      return;\n    }\n\n    let bmi = (this.state.weight / (this.state.height / 100 * this.state.height / 100)).toFixed(1);\n    let chonks = null;\n    let resultString = \"\";\n\n    switch (this.classifyResult(bmi)) {\n      case \"slim\":\n        {\n          chonks = this.state.AllChonkImg.slimChonk;\n          resultString = \"You're pretty slonky, have a burger!\";\n          break;\n        }\n\n      case \"normal\":\n        {\n          chonks = this.state.AllChonkImg.normalChonk;\n          resultString = \"You're okay...for now.\";\n          break;\n        }\n\n      case \"fat\":\n        {\n          chonks = this.state.AllChonkImg.fatChonk;\n          resultString = \"You're getting kind of fat...\";\n          break;\n        }\n\n      case \"tooFat\":\n        {\n          chonks = this.state.AllChonkImg.tooFatChonk;\n          resultString = \"You're quite the chonker, there!\";\n          break;\n        }\n    } //gettind the random images and avoiding duplicates\n\n\n    const randNum = Math.floor(Math.random() * chonks.length);\n    const randChonk = chonks[randNum];\n\n    if (this.state.resultChonk === randChonk) {\n      this.calcBmi(event);\n      return;\n    }\n\n    this.setState({\n      resultChonk: randChonk\n    });\n    this.setState({\n      chonkVisibility: \"visibleChonk\"\n    });\n    this.setState({\n      bmiText: resultString\n    });\n    this.setState({\n      bmiValue: bmi\n    });\n    this.setState({\n      text: \"invisibleChonk\"\n    });\n  } // clear button\n\n\n  clear(event) {\n    event.preventDefault();\n    this.setState({\n      height: \"\",\n      weight: \"\",\n      bmiValue: \"\"\n    });\n    this.setState({\n      chonkVisibility: \"invisibleChonk\"\n    });\n    this.setState({\n      heightErr: \"\",\n      weightErr: \"\"\n    });\n    this.setState({\n      text: \"visibleChonk\"\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, \"Calculate Your Body Mass Index\")), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 15\n      }\n    }, \"Height (95cm-220cm)\")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"height\",\n      step: \"1\",\n      placeholder: \"cm\",\n      min: minHeight,\n      max: maxHeight,\n      value: this.state.height,\n      onChange: this.handleHeightChange.bind(this),\n      onKeyPress: this.handleKeyPress.bind(this, 'height'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 12\n      }\n    }, this.state.heightErr), /*#__PURE__*/React.createElement(Slider, {\n      min: minHeight,\n      max: maxHeight,\n      step: 1,\n      value: this.state.height,\n      onChange: this.handleHeightSliderChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, \"Weight (10kg-300kg)\")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"weight\",\n      step: \"0.5\",\n      placeholder: \"kg\",\n      min: minWeight,\n      max: maxWeight,\n      value: this.state.weight,\n      onChange: this.handleWeightChange.bind(this),\n      onKeyPress: this.handleKeyPress.bind(this, 'weight'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 12\n      }\n    }, this.state.weightErr), /*#__PURE__*/React.createElement(Slider, {\n      min: minWeight,\n      max: maxWeight,\n      step: 0.5,\n      value: this.state.weight,\n      onChange: this.handleWeightSliderChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"buttons-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: event => {\n        event.preventDefault();\n        this.calcBmi();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }\n    }, \"Calculate\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: this.clear.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }\n    }, \"Clear\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.chonkVisibility,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.resultChonk,\n      alt: \"pictures of cats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"result-top-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }\n    }, \"Your current BMI: \", bmiValue, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"bmi-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }\n    }, this.state.bmiText)), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }\n    }, \"Body mass index, abbreviated BMI, is a key index for relating weight to height.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }\n    }), \"BMI is a person's weight in kilograms (kg) divided by his or her height in meters squared. The National Institutes of Health (NIH) now defines normal weight, overweight, and obesity according to BMI rather than the traditional height/weight charts.\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }\n    }, \"Overweight is a BMI of 25\\u201329.9.\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }\n    }, \"Obesity is a BMI of 30 or more. A very muscular person might have a high BMI without health risks.\")))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sebestyenboglarka/projektek/bmi/src/App.js"],"names":["React","Slider","App","Component","constructor","state","height","weight","heightErr","weightErr","bmiValue","bmiText","text","chonkVisibility","resultChonk","AllChonkImg","slimChonk","normalChonk","fatChonk","tooFatChonk","calcBmi","bind","minHeight","maxHeight","minWeight","maxWeight","slimThre","normalThre","fatThre","handleHeightChange","event","setState","target","value","handleWeightChange","handleHeightSliderChange","handleWeightSliderChange","handleKeyPress","source","allowedChars","currentChar","key","found","i","length","preventDefault","currentValue","parseInt","classifyResult","result","validate","heightErrStr","weightErrStr","bmi","toFixed","chonks","resultString","randNum","Math","floor","random","randChonk","clear","render"],"mappings":"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","sourcesContent":["    import React from 'react'\n    import './App.css'\n    import Slider from 'react-rangeslider'\n    import 'react-rangeslider/lib/index.css'\n\n\n    class App extends React.Component {\n      constructor() {\n        super()\n        this.state = {\n          height: 0,\n          weight: 0,\n          heightErr: \"\",\n          weightErr: \"\",\n          bmiValue: \"\",\n          bmiText: \"\",\n          text: \"\",\n          chonkVisibility : \"invisibleChonk\",\n          resultChonk: \"\",\n          AllChonkImg: {\n            slimChonk: [\"./images/slim/1.jpg\", \"./images/slim/2.jpg\"],\n            normalChonk: [\"./images/normal/1.jpg\", \"./images/normal/3.jpg\", \"./images/normal/5.jpg\"],\n            fatChonk: [\"./images/fat/2.jpg\", \"./images/fat/3.jpg\", \"./images/fat/4.jpg\"],\n            tooFatChonk: [\"./images/2chonk/1.jpg\", \"./images/2chonk/3.jpg\", \"./images/2chonk/4.jpg\"]\n          }          \n        }\n\n        this.calcBmi = this.calcBmi.bind(this)\n\n          this.minHeight = 95\n          this.maxHeight = 220\n          this.minWeight = 10\n          this.maxWeight = 300\n          this.slimThre = 18.5\n          this.normalThre = 24.9\n          this.fatThre = 29.9\n      }\n\n\n      handleHeightChange(event) { //spinner\n        this.setState({ height: event.target.value})\n      }\n\n      handleWeightChange(event) { //spinner\n        this.setState({ weight: event.target.value})\n      }\n\n      handleHeightSliderChange(value) { //range\n        this.setState({ height: value})\n      }\n\n      handleWeightSliderChange(value) { //range\n        this.setState({ weight: value})\n      }\n      \n      // const minHeight = 95\n      // const maxHeight = 220\n      // const minWeight = 10\n      // const maxWeight = 300\n      // const slimThre = 18.5\n      // const normalThre = 24.9\n      // const fatThre = 29.9\n\n\n      //limiting input to numbers\n      handleKeyPress(source, event) {\n        const allowedChars = \".0123456789\"\n        const currentChar = event.key\n        let found = false\n        for (let i = 0;  i < allowedChars.length; i++) {\n          if (currentChar === allowedChars[i]) {\n            found = true\n          }\n        }\n        if(found === false) {\n          event.preventDefault()\n          return\n        }\n\n        //limiting number input in height/weight\n        let currentValue = 0   \n        if (source === 'height') {\n          currentValue = parseInt(this.state.height + currentChar)\n          if (currentValue > maxHeight) {\n            event.preventDefault()\n          }\n        } else {\n          currentValue = this.state.weight + currentChar\n          if (currentValue > maxWeight) {\n            event.preventDefault()\n          }\n        }\n      }\n\n        //classifying the results w/images, calculating BMI\n        classifyResult(result) {\n          if (result < slimThre) {\n            return \"slim\"\n          }\n          if (result <= normalThre) {\n            return \"normal\"\n          }\n          if (result <= fatThre) {\n            return \"fat\"\n          }\n          return \"tooFat\"\n        }\n\n        //height, weight validation and min/max manual input nrs \n        validate() {\n          this.setState({heightErr: \"\", weightErr: \"\"})\n\n          let heightErrStr = \"\"\n          let weightErrStr = \"\"\n\n\n          //error messageges for H/W\n          if(!this.state.height) {\n            heightErrStr = \"Please, enter height\"\n          } else if(this.state.height < minHeight) {\n            heightErrStr = \"Greater than 95, please\"\n          } \n          \n\n          if(!this.state.weight) {\n            weightErrStr = \"Please, enter weight\"\n          } else if(this.state.weight < minWeight) {\n           weightErrStr = \"Greater than 10, please\"\n         } \n\n\n\n         if(heightErrStr || weightErrStr) { \n          this.setState({heightErr: heightErrStr, weightErr: weightErrStr}) \n          return false \n        }\n        return true \n      }\n      \n\n      calcBmi(event) {\n        if(!this.validate()) {\n          return \n      }\n\n\n        let bmi = (this.state.weight / (this.state.height/100 * this.state.height/100)).toFixed(1)\n        let chonks = null\n        let resultString = \"\"\n\n\n        switch (this.classifyResult(bmi)) {\n          case \"slim\": {\n            chonks = this.state.AllChonkImg.slimChonk\n            resultString = \"You're pretty slonky, have a burger!\"\n            break\n          }\n          case \"normal\": {\n            chonks = this.state.AllChonkImg.normalChonk\n            resultString = \"You're okay...for now.\"\n            break\n          }\n          case \"fat\": {\n            chonks = this.state.AllChonkImg.fatChonk\n            resultString = \"You're getting kind of fat...\"\n            break\n          }\n          case \"tooFat\": {\n            chonks = this.state.AllChonkImg.tooFatChonk\n            resultString = \"You're quite the chonker, there!\"\n            break\n          }\n        }\n\n          //gettind the random images and avoiding duplicates\n          const randNum = Math.floor(Math.random() * chonks.length)\n          const randChonk = chonks[randNum]\n\n\n          if(this.state.resultChonk === randChonk) {\n            this.calcBmi(event)\n            return\n          }\n\n          this.setState({resultChonk: randChonk})\n          this.setState({chonkVisibility: \"visibleChonk\" })  \n          this.setState({bmiText: resultString})\n          this.setState({bmiValue: bmi}) \n          this.setState({text: \"invisibleChonk\"})\n        }\n\n\n        // clear button\n        clear(event) {\n          event.preventDefault()\n          this.setState({ height: \"\", weight: \"\", bmiValue: \"\" })\n          this.setState({ chonkVisibility: \"invisibleChonk\" })\n          this.setState({ heightErr: \"\", weightErr: \"\" })\n          this.setState({ text: \"visibleChonk\"})\n        }\n\n\n        render() {\n          return ( \n            <div id=\"container\"> \n              <div id=\"title\">\n                <h1>Calculate Your Body Mass Index</h1>\n              </div>\n           <form>\n            <div className=\"unit\">\n              <p>Height (95cm-220cm)</p>\n           </div>\n           <input \n             type=\"number\" \n             name=\"height\" \n             step=\"1\" \n             placeholder=\"cm\" \n             min={minHeight} \n             max={maxHeight} \n             value={this.state.height}\n             onChange={this.handleHeightChange.bind(this)}\n             onKeyPress={this.handleKeyPress.bind(this, 'height')}\n           />\n\n           <div className=\"error\">{this.state.heightErr}</div>\n\n           <Slider \n             min={minHeight} \n             max={maxHeight} \n             step={1} \n             value={this.state.height} \n             onChange={this.handleHeightSliderChange.bind(this)}\n           />                \n\n\n           <br />\n\n           <div className=\"unit\">\n            <p>Weight (10kg-300kg)</p>\n           </div>\n           <input \n             type=\"number\" \n             name=\"weight\" \n             step=\"0.5\" \n             placeholder=\"kg\" \n             min={minWeight} \n             max={maxWeight} \n             value={this.state.weight} \n             onChange={this.handleWeightChange.bind(this)}\n             onKeyPress={this.handleKeyPress.bind(this, 'weight')}\n           />\n\n           <div className=\"error\">{this.state.weightErr}</div>\n\n           <Slider\n             min={minWeight} \n             max={maxWeight} \n             step={0.5} \n             value={this.state.weight} \n             onChange={this.handleWeightSliderChange.bind(this)}\n           />\n\n\n           <br />\n\n           <div id=\"buttons-container\">\n            <button \n              className=\"button\" \n              onClick={event => {\n                event.preventDefault()\n                this.calcBmi()\n              }}\n              >Calculate\n            </button>\n\n          <br />\n\n\n            <button \n              className=\"button\" \n              onClick={this.clear.bind(this)}\n              >Clear\n            </button>\n          </div>\n\n          <br />\n\n          </form>\n          <div className={this.state.chonkVisibility}>\n          <div id=\"image\">\n          <img src={this.state.resultChonk} alt=\"pictures of cats\" />\n          </div>\n          <div id=\"result-top-text\">\n          <p>Your current BMI: {bmiValue} </p>\n          </div>\n          <div id=\"bmi-text\">{this.state.bmiText}</div>\n          </div>\n          <div className={this.state.text}>\n          <div id=\"text\">\n          Body mass index, abbreviated BMI, is a key index for relating weight to height. \n          <br />\n          <br />\n          BMI is a person's weight in kilograms (kg) divided by his or her height in meters squared.\n          The National Institutes of Health (NIH) now defines normal weight, overweight, and obesity according to \n          BMI rather than the traditional height/weight charts.\n          <ul>\n          <li>Overweight is a BMI of 25–29.9.</li>\n          <li>Obesity is a BMI of 30 or more. A very muscular person might have a high BMI without health risks.</li>\n          </ul>\n          </div>\n          </div>\n          </div>\n          )\n        }\n      }\n\n\n\n\n      export default App\n"]},"metadata":{},"sourceType":"module"}