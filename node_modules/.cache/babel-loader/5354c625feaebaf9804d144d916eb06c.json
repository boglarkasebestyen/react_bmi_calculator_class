{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/projektek/bmi/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Slider from 'react-rangeslider';\nimport 'react-rangeslider/lib/index.css';\nconst minHeight = 95;\nconst maxHeight = 220;\nconst minWeight = 10;\nconst maxWeight = 300;\nconst slimThre = 18.5;\nconst normalThre = 24.9;\nconst fatThre = 29.9;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      height: 0,\n      weight: 0,\n      heightErr: \"\",\n      weightErr: \"\",\n      bmiValue: \"\",\n      bmiText: \"\",\n      text: \"\",\n      chonkVisibility: \"invisibleChonk\",\n      resultChonk: \"\",\n      AllChonkImg: {\n        slimChonk: [\"./images/slim/1.jpg\", \"./images/slim/2.jpg\", \"./images/slim/3.jpg\", \"./images/slim/4.jpg\"],\n        normalChonk: [\"./images/normal/1.jpg\", \"./images/normal/2.jpg\", \"./images/normal/3.jpg\", \"./images/normal/4.jpg\", \"./images/normal/5.jpg\"],\n        fatChonk: [\"./images/fat/1.jpg\", \"./images/fat/2.jpg\", \"./images/fat/3.jpg\", \"./images/fat/4.jpg\"],\n        tooFatChonk: [\"./images/2fat/1.jpg\", \"./images/2fat/2.jpg\", \"./images/2fat/3.jpg\", \"./images/2fat/4.jpg\", \"./images/2fat/5.jpg\", \"./images/2fat/6.jpg\"]\n      }\n    };\n    this.calcBmi = this.calcBmi.bind(this);\n  }\n\n  handleHeightChange(event) {\n    //spinner\n    this.setState({\n      height: event.target.value\n    });\n  }\n\n  handleWeightChange(event) {\n    //spinner\n    this.setState({\n      weight: event.target.value\n    });\n  }\n\n  handleHeightSliderChange(value) {\n    //range\n    this.setState({\n      height: value\n    });\n  }\n\n  handleWeightSliderChange(value) {\n    //range\n    this.setState({\n      weight: value\n    });\n  } //limiting input to numbers\n\n\n  handleKeyPress(source, event) {\n    const allowedChars = \".0123456789\";\n    const currentChar = event.key;\n    let found = false;\n\n    for (let i = 0; i < allowedChars.length; i++) {\n      if (currentChar === allowedChars[i]) {\n        found = true;\n      }\n    }\n\n    if (found === false) {\n      event.preventDefault();\n      return;\n    } //limiting number input in height/weight\n\n\n    let currentValue = 0;\n\n    if (source === 'height') {\n      currentValue = parseInt(this.state.height + currentChar);\n\n      if (currentValue > maxHeight) {\n        event.preventDefault();\n      }\n    } else {\n      currentValue = this.state.weight + currentChar;\n\n      if (currentValue > maxWeight) {\n        event.preventDefault();\n      }\n    }\n  } //classifying the results w/images, calculating BMI\n\n\n  classifyResult(result) {\n    if (result < slimThre) {\n      return \"slim\";\n    }\n\n    if (result <= normalThre) {\n      return \"normal\";\n    }\n\n    if (result <= fatThre) {\n      return \"fat\";\n    }\n\n    return \"tooFat\";\n  } //height, weight validation and min/max manual input nrs \n\n\n  validate() {\n    this.setState({\n      heightErr: \"\",\n      weightErr: \"\"\n    });\n    let heightErrStr = \"\";\n    let weightErrStr = \"\"; //error messageges for H/W\n\n    if (!this.state.height) {\n      heightErrStr = \"Please, enter height\";\n    } else if (this.state.height < minHeight) {\n      heightErrStr = \"Greater than 95, please\";\n    } else if (this.state.height > maxHeight) {\n      heightErrStr = \"Less than 220, please\";\n    }\n\n    if (!this.state.weight) {\n      weightErrStr = \"Please, enter weight\";\n    } else if (this.state.weight < minWeight) {\n      weightErrStr = \"Greater than 10, please\";\n    } else if (this.state.weight > maxWeight) {\n      weightErrStr = \"Less than 300, please\";\n    }\n\n    if (heightErrStr || weightErrStr) {\n      this.setState({\n        heightErr: heightErrStr,\n        weightErr: weightErrStr\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n  calcBmi(event) {\n    if (!this.validate()) {\n      return;\n    }\n\n    let bmi = (this.state.weight / (this.state.height / 100 * this.state.height / 100)).toFixed(1);\n    let chonks = null;\n    let resultString = \"\";\n\n    switch (this.classifyResult(bmi)) {\n      case \"slim\":\n        {\n          chonks = this.state.AllChonkImg.slimChonk;\n          resultString = \"You're pretty slonky, have a KitKat!\";\n          break;\n        }\n\n      case \"normal\":\n        {\n          chonks = this.state.AllChonkImg.normalChonk;\n          resultString = \"You're okay...for now.\";\n          break;\n        }\n\n      case \"fat\":\n        {\n          chonks = this.state.AllChonkImg.fatChonk;\n          resultString = \"You're getting kind of fat...\";\n          break;\n        }\n\n      case \"tooFat\":\n        {\n          chonks = this.state.AllChonkImg.tooFatChonk;\n          resultString = \"You're quite the chonker, there!\";\n          break;\n        }\n    } //gettind random images & avoiding duplicates\n\n\n    const randNum = Math.floor(Math.random() * chonks.length);\n    const randChonk = chonks[randNum];\n\n    if (this.state.resultChonk === randChonk) {\n      this.calcBmi(event);\n      return;\n    }\n\n    this.setState({\n      resultChonk: randChonk\n    });\n    this.setState({\n      chonkVisibility: \"visibleChonk\"\n    });\n    this.setState({\n      bmiText: resultString\n    });\n    this.setState({\n      bmiValue: bmi\n    });\n    this.setState({\n      text: \"invisibleChonk\"\n    });\n  } // clear button\n\n\n  clear(event) {\n    event.preventDefault();\n    this.setState({\n      height: \"\",\n      weight: \"\",\n      bmiValue: \"\"\n    });\n    this.setState({\n      chonkVisibility: \"invisibleChonk\"\n    });\n    this.setState({\n      heightErr: \"\",\n      weightErr: \"\"\n    });\n    this.setState({\n      text: \"visibleChonk\"\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }\n    }, \"Calculate Your Body Mass Index\")), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }, \"Height (95cm-220cm)\")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"height\",\n      step: \"1\",\n      placeholder: \"cm\",\n      min: minHeight,\n      max: maxHeight,\n      value: this.state.height,\n      onChange: this.handleHeightChange.bind(this),\n      onKeyPress: this.handleKeyPress.bind(this, 'height'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 22\n      }\n    }, this.state.heightErr), /*#__PURE__*/React.createElement(Slider, {\n      min: minHeight,\n      max: maxHeight,\n      step: 1,\n      value: this.state.height,\n      onChange: this.handleHeightSliderChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 23\n      }\n    }, \"Weight (10kg-300kg)\")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"weight\",\n      step: \"0.5\",\n      placeholder: \"kg\",\n      min: minWeight,\n      max: maxWeight,\n      value: this.state.weight,\n      onChange: this.handleWeightChange.bind(this),\n      onKeyPress: this.handleKeyPress.bind(this, 'weight'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 22\n      }\n    }, this.state.weightErr), /*#__PURE__*/React.createElement(Slider, {\n      min: minWeight,\n      max: maxWeight,\n      step: 0.5,\n      value: this.state.weight,\n      onChange: this.handleWeightSliderChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 22\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 22\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"buttons-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: event => {\n        event.preventDefault();\n        this.calcBmi();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 23\n      }\n    }, \"Calculate\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: this.clear.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 23\n      }\n    }, \"Clear\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.chonkVisibility,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.resultChonk,\n      alt: \"pictures of cats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"result-top-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 21\n      }\n    }, \"Your current BMI: \", this.state.bmiValue, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"bmi-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }\n    }, this.state.bmiText)), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 19\n      }\n    }, \"Body mass index, abbreviated BMI, is a key index for relating weight to height.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 21\n      }\n    }), \"BMI is a person's weight in kilograms (kg) divided by his or her height in meters squared. The National Institutes of Health (NIH) now defines normal weight, overweight, and obesity according to BMI rather than the traditional height/weight charts.\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 23\n      }\n    }, \"Overweight is a BMI of 25\\u201329.9.\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 23\n      }\n    }, \"Obesity is a BMI of 30 or more. A very muscular person might have a high BMI without health risks.\"))))) //container\n    ;\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sebestyenboglarka/projektek/bmi/src/App.js"],"names":["React","Slider","minHeight","maxHeight","minWeight","maxWeight","slimThre","normalThre","fatThre","App","Component","constructor","state","height","weight","heightErr","weightErr","bmiValue","bmiText","text","chonkVisibility","resultChonk","AllChonkImg","slimChonk","normalChonk","fatChonk","tooFatChonk","calcBmi","bind","handleHeightChange","event","setState","target","value","handleWeightChange","handleHeightSliderChange","handleWeightSliderChange","handleKeyPress","source","allowedChars","currentChar","key","found","i","length","preventDefault","currentValue","parseInt","classifyResult","result","validate","heightErrStr","weightErrStr","bmi","toFixed","chonks","resultString","randNum","Math","floor","random","randChonk","clear","render"],"mappings":"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","sourcesContent":["    import React from 'react'\n    import './App.css'\n    import Slider from 'react-rangeslider'\n    import 'react-rangeslider/lib/index.css'\n\n    const minHeight = 95\n    const maxHeight = 220\n    const minWeight = 10\n    const maxWeight = 300\n    const slimThre = 18.5\n    const normalThre = 24.9\n    const fatThre = 29.9\n\n\n    class App extends React.Component {\n      constructor() {\n        super()\n        this.state = {\n          height: 0,\n          weight: 0,\n          heightErr: \"\",\n          weightErr: \"\",\n          bmiValue: \"\",\n          bmiText: \"\",\n          text: \"\",\n          chonkVisibility : \"invisibleChonk\",\n          resultChonk: \"\",\n          AllChonkImg: {\n            slimChonk: [\"./images/slim/1.jpg\", \"./images/slim/2.jpg\", \"./images/slim/3.jpg\", \"./images/slim/4.jpg\"],\n            normalChonk: [\"./images/normal/1.jpg\", \"./images/normal/2.jpg\", \"./images/normal/3.jpg\", \"./images/normal/4.jpg\", \"./images/normal/5.jpg\"],\n            fatChonk: [\"./images/fat/1.jpg\", \"./images/fat/2.jpg\", \"./images/fat/3.jpg\", \"./images/fat/4.jpg\"],\n            tooFatChonk: [\"./images/2fat/1.jpg\", \"./images/2fat/2.jpg\", \"./images/2fat/3.jpg\", \"./images/2fat/4.jpg\", \"./images/2fat/5.jpg\", \"./images/2fat/6.jpg\"]\n          }\n        }\n\n        this.calcBmi = this.calcBmi.bind(this)\n      }\n\n\n      handleHeightChange(event) { //spinner\n        this.setState({ height: event.target.value})\n      }\n\n      handleWeightChange(event) { //spinner\n        this.setState({ weight: event.target.value})\n      }\n\n      handleHeightSliderChange(value) { //range\n        this.setState({ height: value})\n      }\n\n      handleWeightSliderChange(value) { //range\n        this.setState({ weight: value})\n      }\n\n      //limiting input to numbers\n      handleKeyPress(source, event) {\n        const allowedChars = \".0123456789\"\n        const currentChar = event.key\n        let found = false\n        for (let i = 0;  i < allowedChars.length; i++) {\n          if (currentChar === allowedChars[i]) {\n            found = true\n          }\n        }\n        if(found === false) {\n          event.preventDefault()\n          return\n        }\n\n        //limiting number input in height/weight\n        let currentValue = 0   \n        if (source === 'height') {\n          currentValue = parseInt(this.state.height + currentChar)\n          if (currentValue > maxHeight) {\n            event.preventDefault()\n          }\n        } else {\n          currentValue = this.state.weight + currentChar\n          if (currentValue > maxWeight) {\n            event.preventDefault()\n          }\n        }\n      }\n\n        //classifying the results w/images, calculating BMI\n        classifyResult(result) {\n          if (result < slimThre) {\n            return \"slim\"\n          }\n          if (result <= normalThre) {\n            return \"normal\"\n          }\n          if (result <= fatThre) {\n            return \"fat\"\n          }\n          return \"tooFat\"\n        }\n\n        //height, weight validation and min/max manual input nrs \n        validate() {\n          this.setState({heightErr: \"\", weightErr: \"\"})\n\n          let heightErrStr = \"\"\n          let weightErrStr = \"\"\n\n\n          //error messageges for H/W\n        if(!this.state.height) {\n          heightErrStr = \"Please, enter height\"\n        } else if(this.state.height < minHeight) {\n          heightErrStr = \"Greater than 95, please\"\n        } else if(this.state.height > maxHeight) {\n          heightErrStr = \"Less than 220, please\"\n        }\n          \n        if(!this.state.weight) {\n          weightErrStr = \"Please, enter weight\"\n        } else if(this.state.weight < minWeight) {\n           weightErrStr = \"Greater than 10, please\"\n        } else if(this.state.weight > maxWeight) {\n           weightErrStr = \"Less than 300, please\"\n        }\n      \n       if(heightErrStr || weightErrStr) { \n          this.setState({heightErr: heightErrStr, weightErr: weightErrStr}) \n          return false \n        }\n        return true \n      }\n\n\n      calcBmi(event) {\n        if(!this.validate()) {\n          return \n      }\n\n        let bmi = (this.state.weight / (this.state.height/100 * this.state.height/100)).toFixed(1)\n        let chonks = null\n        let resultString = \"\"\n\n\n        switch (this.classifyResult(bmi)) {\n          case \"slim\": {\n            chonks = this.state.AllChonkImg.slimChonk\n            resultString = \"You're pretty slonky, have a KitKat!\"\n            break\n          }\n          case \"normal\": {\n            chonks = this.state.AllChonkImg.normalChonk\n            resultString = \"You're okay...for now.\"\n            break\n          }\n          case \"fat\": {\n            chonks = this.state.AllChonkImg.fatChonk\n            resultString = \"You're getting kind of fat...\"\n            break\n          }\n          case \"tooFat\": {\n            chonks = this.state.AllChonkImg.tooFatChonk\n            resultString = \"You're quite the chonker, there!\"\n            break\n          }\n        }\n\n          //gettind random images & avoiding duplicates\n          const randNum = Math.floor(Math.random() * chonks.length)\n          const randChonk = chonks[randNum]\n\n\n          if(this.state.resultChonk === randChonk) {\n            this.calcBmi(event)\n            return\n          }\n\n          this.setState({resultChonk: randChonk})\n          this.setState({chonkVisibility: \"visibleChonk\" })  \n          this.setState({bmiText: resultString})\n          this.setState({bmiValue: bmi}) \n          this.setState({text: \"invisibleChonk\"})\n        }\n\n\n        // clear button\n        clear(event) {\n          event.preventDefault()\n          this.setState({ height: \"\", weight: \"\", bmiValue: \"\" })\n          this.setState({ chonkVisibility: \"invisibleChonk\" })\n          this.setState({ heightErr: \"\", weightErr: \"\" })\n          this.setState({ text: \"visibleChonk\"})\n        }\n\n\n        render() {\n          return ( \n            <div id=\"container\"> \n              <div id=\"title\">\n                <h1>Calculate Your Body Mass Index</h1>\n              </div>\n                <form>\n                  <div className=\"unit\">\n                    <p>Height (95cm-220cm)</p>\n                  </div>\n                    <input \n                       type=\"number\" \n                       name=\"height\" \n                       step=\"1\" \n                       placeholder=\"cm\" \n                       min={minHeight} \n                       max={maxHeight} \n                       value={this.state.height}\n                       onChange={this.handleHeightChange.bind(this)}\n                       onKeyPress={this.handleKeyPress.bind(this, 'height')}\n                     />\n\n                     <div id=\"error\">{this.state.heightErr}</div>\n\n                    <Slider \n                       min={minHeight} \n                       max={maxHeight} \n                       step={1} \n                       value={this.state.height} \n                       onChange={this.handleHeightSliderChange.bind(this)}\n                    />                \n\n                    <br />\n\n                    <div className=\"unit\">\n                      <p>Weight (10kg-300kg)</p>\n                    </div>\n                      <input \n                         type=\"number\" \n                         name=\"weight\" \n                         step=\"0.5\" \n                         placeholder=\"kg\" \n                         min={minWeight} \n                         max={maxWeight} \n                         value={this.state.weight} \n                         onChange={this.handleWeightChange.bind(this)}\n                         onKeyPress={this.handleKeyPress.bind(this, 'weight')}\n                      />\n\n                     <div className=\"error\">{this.state.weightErr}</div>\n\n                     <Slider\n                       min={minWeight} \n                       max={maxWeight} \n                       step={0.5} \n                       value={this.state.weight} \n                       onChange={this.handleWeightSliderChange.bind(this)}\n                     />\n\n                     <br />\n\n                     <div id=\"buttons-container\">\n                      <button \n                        className=\"button\" \n                        onClick={event => {\n                          event.preventDefault()\n                          this.calcBmi()\n                        }}\n                        >Calculate\n                      </button>\n\n                    <br />\n\n                      <button \n                        className=\"button\" \n                        onClick={this.clear.bind(this)}\n                        >Clear\n                      </button>\n                    </div>\n\n                    <br />\n\n                </form>\n\n                <div className={this.state.chonkVisibility}>\n                  <div id=\"image\">\n                    <img src={this.state.resultChonk} alt=\"pictures of cats\" />\n                  </div>\n                  <div id=\"result-top-text\">\n                    <p>Your current BMI: {this.state.bmiValue} </p>\n                  </div>\n                <div id=\"bmi-text\">{this.state.bmiText}</div>\n                </div>\n\n                <div className={this.state.text}>\n                  <div id=\"text\">\n                    Body mass index, abbreviated BMI, is a key index for relating weight to height. \n                    <br />\n                    <br />\n                    BMI is a person's weight in kilograms (kg) divided by his or her height in meters squared.\n                    The National Institutes of Health (NIH) now defines normal weight, overweight, and obesity according to \n                    BMI rather than the traditional height/weight charts.\n                    <ul>\n                      <li>Overweight is a BMI of 25–29.9.</li>\n                      <li>Obesity is a BMI of 30 or more. A very muscular person might have a high BMI without health risks.</li>\n                    </ul>\n                  </div>\n                </div>\n            </div> //container\n          )\n        }\n      }\n\n      export default App\n"]},"metadata":{},"sourceType":"module"}