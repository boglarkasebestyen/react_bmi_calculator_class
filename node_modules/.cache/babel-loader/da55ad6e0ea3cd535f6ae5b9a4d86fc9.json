{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/projektek/bmi/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      height: \"\",\n      weight: \"\",\n      heightError: \"\",\n      weightError: \"\",\n      bmiValue: \"\",\n      bmiText: \"\",\n      chonkVisibility: \"invisibleChonk\",\n      resultChonk: \"\",\n      AllChonkImg: {\n        slimChonk: [\"./images/slim/1.jpg\", \"./images/slim/2.jpg\", \"./images/slim/3.jpg\", \"./images/slim/4.jpg\"],\n        normalChonk: [\"./images/normal/1.jpg\", \"./images/normal/2.jpg\", \"./images/normal/3.jpg\", \"./images/normal/4.jpg\", \"./images/normal/5.jpg\"],\n        fatChonk: [\"./images/fat/1.jpg\", \"./images/fat/2.jpg\", \"./images/fat/3.jpg\", \"./images/fat/4.jpg\"],\n        tooFatChonk: [\"./images/2chonk/1.jpg\", \"./images/2chonk/2.jpg\", \"./images/2chonk/3.jpg\", \"./images/2chonk/4.jpg\", \"./images/2chonk/5.jpg\"]\n      }\n    };\n    this.calcBmi = this.calcBmi.bind(this);\n  }\n\n  handleHeightChange(event) {\n    this.setState({\n      height: event.target.value\n    });\n  }\n\n  handleWeightChange(event) {\n    this.setState({\n      weight: event.target.value\n    });\n  } //limiting input to numbers\n\n\n  handleKeyPress(source, event) {\n    const allowedChars = \".0123456789\";\n    const currentChar = event.key;\n    let found = false;\n\n    for (let i = 0; i < allowedChars.length; i++) {\n      if (currentChar === allowedChars[i]) {\n        found = true;\n      }\n    }\n\n    if (found === false) {\n      event.preventDefault();\n      return;\n    } //limiting number input in height/weight\n\n\n    let currentValue = 0;\n\n    if (source === 'height') {\n      currentValue = parseInt(this.state.height + currentChar);\n\n      if (currentValue > 220) {\n        event.preventDefault();\n      }\n    } else {\n      currentValue = this.state.weight + currentChar;\n\n      if (currentValue > 300) {\n        event.preventDefault();\n      }\n    }\n  } //classifying the results w/images, calculating BMI\n\n\n  classifyResult(result) {\n    if (result < 18.5) {\n      return \"slim\";\n    }\n\n    if (result <= 24.9) {\n      return \"normal\";\n    }\n\n    if (result <= 29.9) {\n      return \"fat\";\n    }\n\n    return \"tooFat\";\n  } //height, weight need to be filled\n\n\n  validate() {\n    this.setState({\n      heightError: \"\",\n      weightError: \"\"\n    });\n    let heightErr = \"\";\n    let weightErr = \"\";\n    let heightNr = Math.min(Math.max(parseInt(this.state.height), 95), 220);\n    let weightNr = Math.min(Math.max(parseInt(this.state.weight), 10), 300);\n    let hText = \"\";\n    let wText = \"\";\n\n    if (!this.state.height) {\n      heightErr = \"enter height\";\n    }\n\n    if (!this.state.weight) {\n      weightErr = \"enter weight\";\n    }\n\n    if (heightErr || weightErr) {\n      this.setState({\n        heightError: heightErr,\n        weightError: weightErr\n      });\n      return false; //because it's not valid\n    }\n\n    return true; //if we don't hit an error\n\n    if (heightNr < 95) {\n      hText = \"Value must be greater than 94\";\n    }\n\n    if (heightNr > 220) {\n      hText = \"Value must be smaller than 220\";\n    }\n\n    if (weightNr < 10) {\n      wText = \"Value must be greater than 10\";\n    }\n\n    if (weightNr > 300) {\n      wText = \"Value must be smaller than 300\";\n    }\n  }\n\n  calcBmi(event) {\n    if (!this.validate()) {\n      return;\n    }\n\n    let bmi = (this.state.weight / (this.state.height / 100 * this.state.height / 100)).toFixed(1);\n    let chonks = null;\n    let resultString = \"\";\n\n    switch (this.classifyResult(bmi)) {\n      case \"slim\":\n        {\n          chonks = this.state.AllChonkImg.slimChonk;\n          resultString = \"You're pretty slonky, have a burger\";\n          break;\n        }\n\n      case \"normal\":\n        {\n          chonks = this.state.AllChonkImg.normalChonk;\n          resultString = \"You're okay...for now\";\n          break;\n        }\n\n      case \"fat\":\n        {\n          chonks = this.state.AllChonkImg.fatChonk;\n          resultString = \"You're getting kind of fat\";\n          break;\n        }\n\n      case \"tooFat\":\n        {\n          chonks = this.state.AllChonkImg.tooFatChonk;\n          resultString = \"You're quite the chonker, there\";\n          break;\n        }\n    } //gettind the random images and avoiding duplicates\n\n\n    const randNum = Math.floor(Math.random() * chonks.length);\n    const randChonk = chonks[randNum];\n\n    if (this.state.resultChonk === randChonk) {\n      // console.log(\"IS EQUAL!\")\n      this.calcBmi(event);\n      return;\n    }\n\n    this.setState({\n      resultChonk: randChonk\n    });\n    this.setState({\n      chonkVisibility: \"visibleChonk\"\n    });\n    this.setState({\n      bmiText: resultString\n    });\n    this.setState({\n      bmiValue: bmi\n    });\n  } // clear button\n\n\n  clear(event) {\n    event.preventDefault();\n    this.setState({\n      height: \"\",\n      weight: \"\",\n      bmiValue: \"\"\n    });\n    this.setState({\n      chonkVisibility: \"invisibleChonk\"\n    });\n    this.setState({\n      heightError: \"\",\n      weightError: \"\"\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }\n    }, \"BMI Calculator\"), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      div: \"height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 15\n      }\n    }, \"Height (95cm-220cm)\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"height\",\n      step: \"0.1\",\n      placeholder: \"cm\",\n      min: \"95\",\n      max: \"220\",\n      value: this.state.height //kell?\n      ,\n      onChange: this.handleHeightChange.bind(this),\n      onKeyPress: this.handleKeyPress.bind(this, 'height'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"he-we-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }, this.state.heightError), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"weight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 16\n      }\n    }, \"Weight (10kg-300kg)\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"weight\",\n      step: \"0.1\",\n      placeholder: \"kg\",\n      min: \"10\",\n      max: \"300\",\n      value: this.state.weight // kell?\n      ,\n      onChange: this.handleWeightChange.bind(this),\n      onKeyPress: this.handleKeyPress.bind(this, 'weight'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"he-we-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }, this.state.weightError), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"calculate\",\n      onClick: event => {\n        event.preventDefault();\n        this.calcBmi();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 8\n      }\n    }, \"Calculate\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"clear\",\n      onClick: this.clear.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }\n    }, \"Clear\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.chonkVisibility,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.resultChonk,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"result-top-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 7\n      }\n    }, \"Your BMI result is \", this.state.bmiValue), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"bmi-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 7\n      }\n    }, this.state.bmiText))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sebestyenboglarka/projektek/bmi/src/App.js"],"names":["React","App","Component","constructor","state","height","weight","heightError","weightError","bmiValue","bmiText","chonkVisibility","resultChonk","AllChonkImg","slimChonk","normalChonk","fatChonk","tooFatChonk","calcBmi","bind","handleHeightChange","event","setState","target","value","handleWeightChange","handleKeyPress","source","allowedChars","currentChar","key","found","i","length","preventDefault","currentValue","parseInt","classifyResult","result","validate","heightErr","weightErr","heightNr","Math","min","max","weightNr","hText","wText","bmi","toFixed","chonks","resultString","randNum","floor","random","randChonk","clear","render"],"mappings":"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","sourcesContent":["import React from 'react'   \nimport './App.css'\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      height: \"\",\n      weight: \"\",\n      heightError: \"\",\n      weightError: \"\",\n      bmiValue: \"\",\n      bmiText: \"\",\n      chonkVisibility : \"invisibleChonk\",\n      resultChonk: \"\",\n      AllChonkImg: {\n        slimChonk: [\"./images/slim/1.jpg\", \"./images/slim/2.jpg\", \"./images/slim/3.jpg\", \"./images/slim/4.jpg\"],\n        normalChonk: [\"./images/normal/1.jpg\", \"./images/normal/2.jpg\", \"./images/normal/3.jpg\", \"./images/normal/4.jpg\", \"./images/normal/5.jpg\"],\n        fatChonk: [\"./images/fat/1.jpg\", \"./images/fat/2.jpg\", \"./images/fat/3.jpg\", \"./images/fat/4.jpg\"],\n        tooFatChonk: [\"./images/2chonk/1.jpg\", \"./images/2chonk/2.jpg\", \"./images/2chonk/3.jpg\", \"./images/2chonk/4.jpg\", \"./images/2chonk/5.jpg\"]\n      }\n    }\n\n\n    this.calcBmi = this.calcBmi.bind(this)\n  }\n\n  handleHeightChange(event) {\n        this.setState({ height: event.target.value})\n  }\n\n  handleWeightChange(event) {\n        this.setState({ weight: event.target.value})\n  }\n\n  //limiting input to numbers\n  handleKeyPress(source, event) {\n      const allowedChars = \".0123456789\"\n      const currentChar = event.key\n      let found = false\n      for (let i = 0;  i < allowedChars.length; i++) {\n        if (currentChar === allowedChars[i]) {\n          found = true\n        }\n      }\n      if(found === false) {\n        event.preventDefault()\n        return\n      }\n\n    //limiting number input in height/weight\n    let currentValue = 0   \n          if (source === 'height') {\n            currentValue = parseInt(this.state.height + currentChar)\n            if (currentValue > 220) {\n              event.preventDefault()\n            }\n          } else {\n            currentValue = this.state.weight + currentChar\n            if (currentValue > 300) {\n              event.preventDefault()\n            }\n          }\n  }\n\n\n    //classifying the results w/images, calculating BMI\n    classifyResult(result) {\n        if (result < 18.5) {\n            return \"slim\"\n        }\n        if (result <= 24.9) {\n          return \"normal\"\n        }\n        if (result <= 29.9) {\n          return \"fat\"\n        }\n        return \"tooFat\"\n    }\n\n    //height, weight need to be filled\n    validate() {\n      this.setState({heightError: \"\", weightError: \"\"})\n      let heightErr = \"\"\n      let weightErr = \"\"\n      let heightNr = Math.min(Math.max(parseInt(this.state.height), 95), 220)\n      let weightNr = Math.min(Math.max(parseInt(this.state.weight), 10), 300)\n      let hText = \"\"\n      let wText = \"\"\n      \n      \n      if(!this.state.height) {\n        heightErr = \"enter height\"\n      }\n\n      if(!this.state.weight) {\n        weightErr = \"enter weight\"\n      }\n\n      if(heightErr || weightErr) {\n        this.setState({heightError: heightErr, weightError: weightErr})  \n        return false //because it's not valid\n      }\n      return true //if we don't hit an error\n\n\n\n      if(heightNr < 95) {\n        hText = \"Value must be greater than 94\"\n      }\n\n      if(heightNr > 220) {\n        hText = \"Value must be smaller than 220\"\n      }\n\n      if(weightNr < 10) {\n        wText = \"Value must be greater than 10\"\n      }\n\n      if(weightNr > 300) {\n        wText = \"Value must be smaller than 300\"\n      }\n    }\n\n\n    calcBmi(event) {\n      if(!this.validate()) {\n        return\n      }\n     \n      let bmi = (this.state.weight / (this.state.height/100 * this.state.height/100)).toFixed(1)\n      let chonks = null\n      let resultString = \"\"\n\n\n      switch (this.classifyResult(bmi)) {\n        case \"slim\": {\n          chonks = this.state.AllChonkImg.slimChonk\n          resultString = \"You're pretty slonky, have a burger\"\n          break\n        }\n        case \"normal\": {\n          chonks = this.state.AllChonkImg.normalChonk\n          resultString = \"You're okay...for now\"\n          break\n        }\n        case \"fat\": {\n          chonks = this.state.AllChonkImg.fatChonk\n          resultString = \"You're getting kind of fat\"\n          break\n        }\n        case \"tooFat\": {\n          chonks = this.state.AllChonkImg.tooFatChonk\n          resultString = \"You're quite the chonker, there\"\n          break\n        }\n      }\n\n      //gettind the random images and avoiding duplicates\n      const randNum = Math.floor(Math.random() * chonks.length)\n      const randChonk = chonks[randNum]\n\n      if(this.state.resultChonk === randChonk) {\n          // console.log(\"IS EQUAL!\")\n          this.calcBmi(event)\n          return\n      }\n\n      this.setState({resultChonk: randChonk})\n      this.setState({chonkVisibility: \"visibleChonk\" })  \n      this.setState({bmiText: resultString})\n      this.setState({bmiValue: bmi}) \n  }\n\n\n    // clear button\n    clear(event) {\n      event.preventDefault()\n      this.setState({ height: \"\", weight: \"\", bmiValue: \"\" })\n      this.setState({ chonkVisibility: \"invisibleChonk\" })\n      this.setState({ heightError: \"\", weightError: \"\" })\n    }\n\n\n  render() {\n    return ( \n      <main>\n        <section id=\"container\"> \n          <h2>BMI Calculator</h2>\n            <form>\n              <p div=\"height\">Height (95cm-220cm)</p>\n                <input \n                  type=\"number\" \n                  name=\"height\" \n                  step=\"0.1\" \n                  placeholder=\"cm\" \n                  min=\"95\" \n                  max=\"220\"\n                  value={this.state.height}//kell?\n                  onChange={this.handleHeightChange.bind(this)}\n                  onKeyPress={this.handleKeyPress.bind(this, 'height')}\n                />\n                <div className=\"he-we-error\">{this.state.heightError}</div>\n\n        \n         <br />\n            \n               <p id=\"weight\">Weight (10kg-300kg)</p>\n                 <input \n                   type=\"number\" \n                   name=\"weight\" \n                   step=\"0.1\" \n                   placeholder=\"kg\" \n                   min=\"10\" \n                   max=\"300\"\n                   value={this.state.weight} // kell?\n                   onChange={this.handleWeightChange.bind(this)}\n                   onKeyPress={this.handleKeyPress.bind(this, 'weight')}\n               />\n                <div className=\"he-we-error\">{this.state.weightError}</div>\n\n        \n        <br />\n        \n        \n       <button \n          id=\"calculate\" \n          onClick={(event) => {\n            event.preventDefault()\n            this.calcBmi()\n          }}\n          >Calculate\n        </button>\n\n        \n        <br />\n\n        <button id=\"clear\" onClick={this.clear.bind(this)}>Clear</button>\n\n        <br />\n\n\n\n     </form>\n    <div className={this.state.chonkVisibility}>\n      <img src={this.state.resultChonk} alt=\"\" />\n      <h2 className=\"result-top-text\">Your BMI result is {this.state.bmiValue}</h2>\n      <h2 className=\"bmi-text\">{this.state.bmiText}</h2>\n    </div>\n     \n    </section>\n   </main>\n  )\n }\n}\n\n\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}