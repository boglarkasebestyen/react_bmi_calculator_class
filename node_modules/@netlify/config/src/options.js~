const {
  cwd: getCwd,
  env: { CONTEXT },
} = require('process')
<<<<<<< HEAD

const { addDefaultRepositoryRoot } = require('./repository_root')
=======

const pathExists = require('path-exists')

const { addDefaultRepositoryRoot } = require('./repository_root')
const { throwError } = require('./error')
>>>>>>> Remove permissions checks on `build.base`
const { removeFalsy } = require('./utils/remove_falsy')

// Normalize options and assign default values
const normalizeOpts = async function(opts = {}) {
  const optsA = removeFalsy(opts)
  const optsB = { ...DEFAULT_OPTS, ...optsA }
  const optsC = await addDefaultRepositoryRoot(optsB)
  const optsD = removeFalsy(optsC)
  await checkPaths(optsD)
  return optsD
}

const DEFAULT_OPTS = {
  cwd: getCwd(),
  context: CONTEXT || 'production',
}

<<<<<<< HEAD
=======
// Verify that options point to existing paths
const checkPaths = async function(opts) {
  await Promise.all(PATH_NAMES.map(pathName => checkPath(opts, pathName)))
}

const PATH_NAMES = ['cwd', 'repositoryRoot']

const checkPath = async function(opts, pathName) {
  const path = opts[pathName]
  if (!(await pathExists(path))) {
    throwError(`Option '${pathName}' points to a non-existing file`)
  }
}

>>>>>>> Remove permissions checks on `build.base`
module.exports = { normalizeOpts }
